<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!-- Template Project file for my projects - based on https://maven.apache.org/pom.html -->

	<groupId>neilpiper.me</groupId>
	<artifactId>parent.pom</artifactId>
	<!-- Default starting version is 0-SNAPSHOT -->
	<version>0.0.1+${revision}</version>
	<packaging>pom</packaging>
	<!-- <parent /> <dependencies /> -->

	<!-- Modules, sub-modules & properties -->
	<modules />
	<properties>
		<project.name>npiper-parent-pom</project.name>
		<!-- Sane default when no revision property is passed in from the commandline -->
		<revision>0-SNAPSHOT</revision>
		<!-- Enforces these minimum versions on build -->
		<miniumumMavenVersion>3.2.1</miniumumMavenVersion>
		<minimumJavaVersion>1.7</minimumJavaVersion>

		<!-- Default maven plugin versions -->
		<mavenCheckstylePluginVersion>3.0.0</mavenCheckstylePluginVersion>
		<mavenEnforcerPluginVersion>3.0.0-M1</mavenEnforcerPluginVersion>
		<codehauseCorbeturaPluginVersion>2.7</codehauseCorbeturaPluginVersion>
	</properties>

	<!-- BUILD SETTINGS -->

	<build>

		<!-- Extension : s3 wagon for repo -->
		<extensions>
			<extension>
				<groupId>org.kuali.maven.wagons</groupId>
				<artifactId>maven-s3-wagon</artifactId>
				<version>1.2.1</version>
			</extension>
		</extensions>

		<pluginManagement>
			<plugins>

				<!-- Checkstyle -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-checkstyle-plugin</artifactId>
					<version>${mavenCheckstylePluginVersion}</version>

					<executions>
						<execution>
							<id>validate</id>
							<phase>validate</phase>
							<configuration>
								<!-- Google checks - built in http://checkstyle.sourceforge.net/google_style.html -->
								<configLocation>google_checks.xml</configLocation>
								<encoding>UTF-8</encoding>
								<consoleOutput>true</consoleOutput>
								<failsOnError>true</failsOnError>
								<linkXRef>false</linkXRef>
							</configuration>
							<goals>
								<goal>check</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- Coverage -->


				<!-- ENFORCER !! -->
				<!-- Java 1.7+ -->
				<!-- Maven 3.2+ -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-enforcer-plugin</artifactId>
					<version>${mavenEnforcerPluginVersion}</version>
					<executions>
						<execution>
							<id>enforce-java</id>
							<goals>
								<goal>validate</goal>
							</goals>
							<configuration>
								<rules>
									<!-- Java >= 1.7 -->
									<requireJavaVersion>
										<version>${minimumJavaVersion}</version>
									</requireJavaVersion>

									<!-- Maven >= 3.1 -->
									<requireMavenVersion>
										<version>${miniumumMavenVersion}</version>
									</requireMavenVersion>

								</rules>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-scm-plugin</artifactId>
					<version>1.9.5</version>
					<configuration>
						<connectionType>connection</connectionType>
						<tag>${project.artifactId}-${project.version}</tag>
					</configuration>
				</plugin>

				<plugin>
					<groupId>pl.project13.maven</groupId>
					<artifactId>git-commit-id-plugin</artifactId>
					<version>2.2.4</version>
					<executions>
						<execution>
							<id>get-the-git-infos</id>
							<goals>
								<goal>revision</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<dotGitDirectory>${project.basedir}/.git</dotGitDirectory>
						<verbose>false</verbose>
						<generateGitPropertiesFile>true</generateGitPropertiesFile>
						<skipPoms>false</skipPoms>
						<generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties</generateGitPropertiesFilename>
						<format>json</format>
						<gitDescribe>
							<skip>false</skip>
							<always>false</always>
							<dirty>-dirty</dirty>
						</gitDescribe>
						<validationProperties>
							<!-- verify that the current repository is not dirty -->
							<validationProperty>
								<name>validating git dirty</name>
								<value>${git.dirty}</value>
								<shouldMatchTo>false</shouldMatchTo>
							</validationProperty>
						</validationProperties>
					</configuration>
				</plugin>



			</plugins>
		</pluginManagement>
	</build>



	<!-- REPORTING -->
	<!-- Corbetura -->
	<reporting>
		<plugins>
			<!-- Checkstyle -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-checkstyle-plugin</artifactId>
				<version>${mavenCheckstylePluginVersion}</version>
				<reportSets>
					<reportSet>
						<reports>
							<report>checkstyle</report>
						</reports>
					</reportSet>
				</reportSets>
			</plugin>


			<!-- Coverage -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>cobertura-maven-plugin</artifactId>
				<version>${codehauseCorbeturaPluginVersion}</version>
			</plugin>
		</plugins>
	</reporting>

	<!-- PROJECT INFORMATION -->

	<!-- Name of the project or module , typically more than just the artifactId 
		i.e. Java 1.5 = 'tiger', printed in the execution, build. Not mandatory but 
		useful. -->
	<name>npiper-parent-pom</name>

	<!-- Description of a project is always good, helps POM readers -->
	<description>
    PROJECT.DESCRIPTION - parent pom for solveapuzzle projects
  </description>

	<!-- URL is helpful for maintenance on where to find the source code, project 
		site. -->
	<url>https:///n_piper/${project.name}/</url>
	<!-- When did this all start...? -->
	<inceptionYear>2017</inceptionYear>

	<!-- legal documents defining how and when a project (or parts of a project) 
		may be used -->
	<licenses>
		<license>
			<name>MIT License</name>
			<url>https://opensource.org/licenses/mit-license.php</url>
			<distribution>repo</distribution>

		</license>
	</licenses>

	<!-- Typically only core dev team, leads, buildmasters. If the person should 
		not be contacted about the project or initiative, they need not be listed 
		here -->
	<developers>
		<developer>
			<id>npiper</id>
			<name>Neil Piper</name>
			<email>solveapuzzledev@gmail.com</email>
			<url>https://www.linkedin.com/in/piperneil</url>
			<!-- <organization>SOLVEAPUZZLE</organization> <organizationUrl>http://www.example.com</organizationUrl> -->
			<roles>
				<role>architect</role>
				<role>developer</role>
			</roles>
			<timezone>Australia/Melbourne</timezone>
			<properties>
				<picUrl>https://avatars3.githubusercontent.com/u/436314</picUrl>
			</properties>
		</developer>
	</developers>


	<!-- ENVIRONMENT & RELEASE SETTINGS -->

	<!-- Where / Which system to raise issues in, can be used by plugins but 
		typically for project / site documentation. -->
	<issueManagement>
		<system>github</system>
		<url>https://github.com/npiper/${project.name}/issues</url>
	</issueManagement>

	<!-- Not bothering with this, using VM's and the artifactory build is more 
		relevant -->
	<ciManagement />


	<!-- Mailing lists are a great tool for keeping in touch with people about 
		a project. Most mailing lists are for developers and users. -->
	<!-- <mailingLists> <mailingList> <name>PROJECT ${project.name} Developer 
		mailing list</name> <subscribe>${project.name}-dev-subscribe@sonatype.org</subscribe> 
		<unsubscribe>${project.name}-dev-unsubscribe@sonatype.org</unsubscribe> <post>${project.name}-dev@sonatype.org</post> 
		<archive>?</archive> </mailingList> </mailingLists> -->


	<!-- Software configuration management details -->
	<!-- Critical for the mvn:release plugin & process, where to find the source 
		code. -->
	<scm>
		<url>https://github.com/npiper/${project.name}</url>
		<connection>scm:git:git://github.com/npiper/${project.name}.git</connection>
		<developerConnection>scm:git:git@github.com:npiper/${project.name}.git</developerConnection>

		<tag>HEAD</tag>
	</scm>

	<!-- REPOSITORIES & PLUGIN REPOSITORIES -->
	<repositories>
		<!-- release repo -->
		<repository>
			<id>solveapuzzle-repo</id>
			<url>s3://solveapuzzle-repo/release</url>
		</repository>
	</repositories>
	<pluginRepositories />


	<!--manages the distribution of the artifact and supporting files during 
		build, release process. Critical for the mvn:deploy & mvn:release process -->
	<distributionManagement>

		<repository>
			<id>solveapuzzle-repo</id>
			<url>s3://solveapuzzle-repo/release</url>
		</repository>

		<!-- Where the pages go -->
		<site>
			<id>gh-pages</id>
			<!-- <url>http://npiper.github.io/${project.name}/</url> -->
			<url>file:///Users/neilpiper/SANDBOX/SITE/${project.name}</url>
		</site>
	</distributionManagement>

	<!-- PROFILES Build & Deploy Profiles -->

	<!-- <profiles> </profiles> -->

</project>
